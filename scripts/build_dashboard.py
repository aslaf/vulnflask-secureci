#!/usr/bin/env python3
"""
Day 12 – Build a simple security dashboard (HTML + MD)
Reads whatever scan outputs exist and produces:
  - security-report.md (root)
  - docs/index.html (for GitHub Pages)
Gracefully handles missing files (prints N/A).
"""

from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple

ROOT = Path(__file__).resolve().parents[1]
OUT_MD = ROOT / "security-report.md"
DOCS_DIR = ROOT / "docs"
DOCS_DIR.mkdir(exist_ok=True, parents=True)
OUT_HTML = DOCS_DIR / "index.html"


def load_json(path: Path) -> Optional[dict]:
    if not path.exists():
        return None
    try:
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return None


def summarize_bandit(p: Path) -> Tuple[str, int]:
    data = load_json(p)
    if not data:
        return ("N/A", 0)
    results = data.get("results", [])
    return ("Present" if results else "Clean", len(results) or 0)


def summarize_semgrep(p: Path) -> Tuple[str, int]:
    data = load_json(p)
    if not data:
        return ("N/A", 0)
    results = data.get("results", [])
    return ("Present" if results else "Clean", len(results) or 0)


def summarize_pip_audit(p: Path) -> Tuple[str, int]:
    data = load_json(p)
    if not data:
        return ("N/A", 0)
    # pip-audit JSON formats vary by version; handle common shapes
    findings = 0
    if isinstance(data, dict) and "dependencies" in data:
        for dep in data["dependencies"]:
            vulns = dep.get("vulns") or dep.get("vulnerabilities") or []
            findings += len(vulns)
    elif isinstance(data, list):  # older format
        for dep in data:
            findings += len(dep.get("vulns", []))
    return ("Present" if findings else "Clean", findings)


def summarize_trivy(p: Path) -> Tuple[str, int]:
    data = load_json(p)
    if not data:
        return ("N/A", 0)
    findings = 0
    for result in data.get("Results", []):
        vulns = result.get("Vulnerabilities") or []
        findings += len(vulns)
    return ("Present" if findings else "Clean", findings)


def summarize_zap(html_path: Path) -> Tuple[str, int]:
    # ZAP baseline action outputs 'report_html.html' by default
    if not html_path.exists():
        return ("N/A", 0)
    # Quick heuristic: count occurrences of 'Risk level:' or 'Alert'
    try:
        content = html_path.read_text(encoding="utf-8", errors="ignore")
        count = content.lower().count("alert")
        return ("Generated", count)
    except Exception:
        return ("Generated", 0)


def row(tool: str, status: str, findings: int) -> str:
    return f"| {tool} | {status} | {findings} |"


def main() -> None:
    bandit_status, bandit_findings = summarize_bandit(ROOT / "bandit-report.json")
    semgrep_status, semgrep_findings = summarize_semgrep(ROOT / "semgrep-report.json")
    pip_status, pip_findings = summarize_pip_audit(ROOT / "pip-audit-report.json")
    trivy_status, trivy_findings = summarize_trivy(ROOT / "trivy-report.json")
    zap_status, zap_findings = summarize_zap(ROOT / "report_html.html")

    timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

    # ---------- Markdown ----------
    md_lines = [
        "# VulnFlask-SecureCI — Security Summary Report",
        "",
        f"**Generated:** {timestamp}",
        "",
        "## Scan Summary",
        "| Tool | Status | Findings |",
        "|------|--------|----------|",
        row("Bandit (SAST)", bandit_status, bandit_findings),
        row("Semgrep (Code)", semgrep_status, semgrep_findings),
        row("pip-audit (SCA)", pip_status, pip_findings),
        row("Trivy/Container", trivy_status, trivy_findings),
        row("OWASP ZAP (DAST)", zap_status, zap_findings),
        "",
        "## Notes",
        "- Missing files show as **N/A** (scan not run or artifacts not persisted).",
        "- This is non-blocking; use it to trend risk and prioritize fixes.",
        "",
        "_Generated by Day 12 dashboard builder._",
    ]
    OUT_MD.write_text("\n".join(md_lines), encoding="utf-8")
    print("Wrote:", OUT_MD)

    # ---------- HTML (GitHub Pages) ----------
    html = f"""<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>VulnFlask-SecureCI — Security Dashboard</title>
<style>
  body {{ font-family: -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 32px; color: #111; }}
  h1 {{ font-size: 24px; margin-bottom: 4px; }}
  .muted {{ color: #666; font-size: 14px; }}
  table {{ border-collapse: collapse; width: 100%; margin-top: 16px; }}
  th, td {{ border: 1px solid #e5e7eb; padding: 8px 12px; text-align: left; }}
  th {{ background: #f9fafb; }}
  .ok {{ color: #157347; }}
  .warn {{ color: #b26a00; }}
  .na {{ color: #6b7280; }}
  .footer {{ margin-top: 24px; font-size: 13px; color: #6b7280; }}
  .links a {{ margin-right: 12px; }}
</style>
</head>
<body>
  <h1>VulnFlask-SecureCI — Security Dashboard</h1>
  <div class="muted">Generated: {timestamp}</div>

  <table>
    <thead>
      <tr><th>Tool</th><th>Status</th><th>Findings</th></tr>
    </thead>
    <tbody>
      <tr><td>Bandit (SAST)</td><td>{bandit_status}</td><td>{bandit_findings}</td></tr>
      <tr><td>Semgrep (Code)</td><td>{semgrep_status}</td><td>{semgrep_findings}</td></tr>
      <tr><td>pip-audit (SCA)</td><td>{pip_status}</td><td>{pip_findings}</td></tr>
      <tr><td>Trivy/Container</td><td>{trivy_status}</td><td>{trivy_findings}</td></tr>
      <tr><td>OWASP ZAP (DAST)</td><td>{zap_status}</td><td>{zap_findings}</td></tr>
    </tbody>
  </table>

  <div class="footer">
    Missing = N/A (scan not run). This page is updated by CI (Day 12).
  </div>
  <div class="links" style="margin-top:12px;">
    <a href="../security-report.md">security-report.md</a>
    <a href="../bandit-report.json">bandit-report.json</a>
    <a href="../semgrep-report.json">semgrep-report.json</a>
    <a href="../pip-audit-report.json">pip-audit-report.json</a>
    <a href="../trivy-report.json">trivy-report.json</a>
    <a href="../report_html.html">zap-report.html</a>
  </div>
</body>
</html>
"""
    OUT_HTML.write_text(html, encoding="utf-8")
    print("Wrote:", OUT_HTML)


if __name__ == "__main__":
    main()
